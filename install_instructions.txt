# Run these commands manually. Tried to automate the steps several times,
# but often times, when OS or key dependency changes, the script breaks.
# install nix
#
# See original repo from Jake Wies:
# * https://github.com/jakewies/.dotfiles
#
# Reference videos and articles:
# * https://www.jakewiesler.com/blog/portable-development-environment

# =====================================================
# ====== IF UBUNTU, INSTALL PACKAGES WITH "apt" ======
# =====================================================
# (using nix was getting complicated, eg installing pip was difficult)
sudo apt update
sudo apt -y install zsh
sudo curl -sfL git.io/antibody | sudo sh -s - -b /usr/local/bin
sudo apt -y install git
sudo apt -y install neovim
sudo apt -y install tmux
sudo apt -y install stow
sudo apt -y install yarn
sudo apt -y install fzf
sudo apt -y install ag
sudo apt -y install ripgrep
# [start] work around for install bat error
# ref: https://github.com/sharkdp/bat/issues/938#issuecomment-759415389 
sudo sed -i '/\/usr\/.crates2.json/d' /var/lib/dpkg/info/ripgrep.list
sudo apt install bat
sudo ln -s batcat /usr/bin/bat
# [end]
# install gnumake and gcc
sudo apt -y install build-essentials
sudo apt -y install direnv
sudo apt -y install trash-cli
sudo apt -y install wget
sudo apt -y install tree
sudo apt -y install rbenv
sudo apt -y install python3
# mabye remove unnecessary files
sudo apt autoremove


# add zsh as a login shell
command -v zsh | sudo tee -a /etc/shells

# use zsh as default shell
sudo chsh -s $(which zsh) $USER

# ====== FI (end) =====================================


# =====================================================
# ====== IF LINUX AND USING NIX, INSTALL PACKAGES WITH "nix" ======
# =====================================================
# install nix
curl -L https://nixos.org/nix/install | sh

# source nix
. ~/.nix-profile/etc/profile.d/nix.sh

# install nix packages
nix-env -iA nixpkgs.zsh
nix-env -iA nixpkgs.antibody
nix-env -iA nixpkgs.git
nix-env -iA nixpkgs.neovim
nix-env -iA nixpkgs.tmux
nix-env -iA nixpkgs.stow
nix-env -iA nixpkgs.yarn
nix-env -iA nixpkgs.fzf
nix-env -iA nixpkgs.ag
nix-env -iA nixpkgs.ripgrep
nix-env -iA nixpkgs.bat
nix-env -iA nixpkgs.gnumake
nix-env -iA nixpkgs.gcc
nix-env -iA nixpkgs.direnv
nix-env -iA nixpkgs.trash-cli
nix-env -iA nixpkgs.wget
nix-env -iA nixpkgs.tree
nix-env -iA nixpkgs.python3
nix-env -iA nixpkgs.rbenv


# add zsh as a login shell
command -v zsh | sudo tee -a /etc/shells

# use zsh as default shell
sudo chsh -s $(which zsh) $USER

# ====== FI (end) =====================================


# =====================================================
# ====== IF MAC, INSTALL PACKAGES WITH "homebrew"======
# =====================================================
# (installing nix on MacOS in a script was becoming too complicated
# and non-standard when working with others)

# install homebrew
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew update

# install brew packages
# brew install zsh # probably don't need
brew install antibody # use ohmyzsh instead
brew install git
brew install neovim
brew install tmux
brew install stow
brew install yarn
brew install fzf
brew install ag
brew install ripgrep
brew install bat
# brew install gnumake
# brew install gcc
brew install direnv
brew install wget
brew install tree
brew install trash-cli
brew install python3
brew install rbenv ruby-build

# Install pip
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python3 get-pip.py

# Install pything support for vim and neovim
pip install pynvim
pip install neovim

# ====== FI (end) =====================================


# =====================================================
# ====== UNIVERSAL SETTINGS ===========================
# =====================================================
# stow dotfiles
stow zsh
stow tmux
stow git
stow nvim
stow p10k
# stow kitty # off for now, may experiment with in future

# links
## Fix vim terminal OR commands (`:!g` for example) not loading .zshrc
## https://stackoverflow.com/a/34049730
ln -s ~/.zshrc ~/.zshenv

# bundle zsh plugins
antibody bundle < ~/.zsh_plugins.txt > ~/.zsh_plugins.sh

# install nvm (Node Version Manager)
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# install latest node
nvm install node

# install Plug for vim before opening vim and running `PlugInstall`
# ref: https://github.com/junegunn/vim-plug
# install neovim plugins
nvim --headless +PlugInstall +qall

# Setup GitHub Copilot
nvim +Copilot setup

# install rbenv and follow instructions: https://github.com/rbenv/rbenv
# May want to use ruby-version and chruby instead
# rbenv init

# Ruby gems
sudo gem install solargraph # used in nvim by coc-solograph
sudo gem install pry
sudo gem install awesome_print

# ====== FI (end) =====================================
